문제 설명
카카오에 신입 개발자로 입사한 "콘"은 선배 개발자로부터 개발역량 강화를 위해 다른 개발자가 작성한 소스 코드를 분석하여 문제점을 발견하고 수정하라는 업무 과제를 받았습니다. 소스를 컴파일하여 로그를 보니 대부분 소스 코드 내 작성된 괄호가 개수는 맞지만 짝이 맞지 않은 형태로 작성되어 오류가 나는 것을 알게 되었습니다.
수정해야 할 소스 파일이 너무 많아서 고민하던 "콘"은 소스 코드에 작성된 모든 괄호를 뽑아서 올바른 순서대로 배치된 괄호 문자열을 알려주는 프로그램을 다음과 같이 개발하려고 합니다.

용어의 정의
'(' 와 ')' 로만 이루어진 문자열이 있을 경우, '(' 의 개수와 ')' 의 개수가 같다면 이를 균형잡힌 괄호 문자열이라고 부릅니다.
그리고 여기에 '('와 ')'의 괄호의 짝도 모두 맞을 경우에는 이를 올바른 괄호 문자열이라고 부릅니다.
예를 들어, "(()))("와 같은 문자열은 "균형잡힌 괄호 문자열" 이지만 "올바른 괄호 문자열"은 아닙니다.
반면에 "(())()"와 같은 문자열은 "균형잡힌 괄호 문자열" 이면서 동시에 "올바른 괄호 문자열" 입니다.

'(' 와 ')' 로만 이루어진 문자열 w가 "균형잡힌 괄호 문자열" 이라면 다음과 같은 과정을 통해 "올바른 괄호 문자열"로 변환할 수 있습니다.

1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
  4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
  4-3. ')'를 다시 붙입니다. 
  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
  4-5. 생성된 문자열을 반환합니다.
"균형잡힌 괄호 문자열" p가 매개변수로 주어질 때, 주어진 알고리즘을 수행해 "올바른 괄호 문자열"로 변환한 결과를 return 하도록 solution 함수를 완성해 주세요.

매개변수 설명
p는 '(' 와 ')' 로만 이루어진 문자열이며 길이는 2 이상 1,000 이하인 짝수입니다.
문자열 p를 이루는 '(' 와 ')' 의 개수는 항상 같습니다.
만약 p가 이미 "올바른 괄호 문자열"이라면 그대로 return 하면 됩니다.



from collections import deque

def solution(p):
    answer = ''
    # u와 v로 분유할 것이기 때문에 시작 단계에서 모든 괄호를 v에 넣고 로직을 통해 균형잡힌 괄호 문자열이 되도록 u에 저장하는 방식 선택
    v = deque(p)
    u = deque(v.popleft())
    start_bracket = u[0] # 비교를 위해 시작 괄호를 저장
    bracket_cnt = 1 # popleft()를 통해 u에 값을 저장했기 때문에 cnt를 1로 선언
    # '('로 시작하는 문자열을 분류한 경우 짝을 맞춰 저장하기 때문에 u는 올바른 괄호 문자열로 판단
    is_left = True if start_bracket == '(' else False
    
    # 균형잡힌 괄호 문자열 분류
    # 초기 ')'로 시작하는 분류 반복 시 로직 오류로 인해 시간 지연, 보다 많은 테스트 케이스 실행 필요
    while bracket_cnt > 0:
        str = v.popleft()
        
        # 시작 괄호와 같은 경우 cnt를 증가, 다른 경우 감소
        # 해당 로직을 통해 1차적으로 균형잡힌 괄호 문자열 판별 가능
        # 예제 1번과 같은 올바른 괄호 문자열의 경우 "(()())()" -> u : "(()())", v : "()"로 분류
        # 재귀 수행 시, 정답을 출력하기에 수정하지 않았지만 개선 필요
        if str == start_bracket: bracket_cnt += 1
        else: bracket_cnt -= 1
            
        u.append(str)
    
    # '('로 시작하는 경우, u는 올바른 괄호 문자열이 저장되어 있으므로 그대로 answer에 저장
    # v에 값이 남아있다면 재귀 호출
    if is_left:
        for x in u: answer += x
        if v: answer += solution(v)
        
    # ')'로 시작하는 경우, 지문에 명시된 로직 수행
    # '(' + solution(v) + ')' + reverse(u[1 : n - 1])
    else:
        answer += '('
        if v: answer += solution(v)
        answer += ')'
        u.popleft()
        u.pop()
        for x in u:
            if x == '(': answer += ')'
            else: answer += '('
        print(answer)

    # 재귀함수를 사용하지 않고 반복문을 통한 시도, 실행 시간 10초 초과
#     while u or v:
#         if u: bracket = u.popleft();
        
#         if bracket == '(':
#             bracket_cnt += 1
#             answer += bracket
#         else: v.append(bracket)
            
#         if v and (bracket_cnt == len(v)): answer += v.popleft()
        
    return answer
